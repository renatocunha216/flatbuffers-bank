// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BANKTRANSACTIONS_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_BANKTRANSACTIONS_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "Common_generated.h"

namespace flatbuffers {

struct BankFbs;
struct BankFbsBuilder;

struct BankAccountFbs;
struct BankAccountFbsBuilder;

struct AuthenticationCodeFbs;

struct FundTransferFbs;
struct FundTransferFbsBuilder;

struct BankTransactionFbs;
struct BankTransactionFbsBuilder;

enum Status : int8_t {
  Status_PENDING = 0,
  Status_CONFIRMED = 1,
  Status_CANCELED = 2,
  Status_MIN = Status_PENDING,
  Status_MAX = Status_CANCELED
};

inline const Status (&EnumValuesStatus())[3] {
  static const Status values[] = {
    Status_PENDING,
    Status_CONFIRMED,
    Status_CANCELED
  };
  return values;
}

inline const char * const *EnumNamesStatus() {
  static const char * const names[4] = {
    "PENDING",
    "CONFIRMED",
    "CANCELED",
    nullptr
  };
  return names;
}

inline const char *EnumNameStatus(Status e) {
  if (::flatbuffers::IsOutRange(e, Status_PENDING, Status_CANCELED)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesStatus()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) AuthenticationCodeFbs FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t value_[16];

 public:
  AuthenticationCodeFbs()
      : value_() {
  }
  AuthenticationCodeFbs(::flatbuffers::span<const int8_t, 16> _value) {
    ::flatbuffers::CastToArray(value_).CopyFromSpan(_value);
  }
  const ::flatbuffers::Array<int8_t, 16> *value() const {
    return &::flatbuffers::CastToArray(value_);
  }
};
FLATBUFFERS_STRUCT_END(AuthenticationCodeFbs, 16);

struct BankFbs FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BankFbsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_BANK_CODE = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int32_t bank_code() const {
    return GetField<int32_t>(VT_BANK_CODE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_BANK_CODE, 4) &&
           verifier.EndTable();
  }
};

struct BankFbsBuilder {
  typedef BankFbs Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(BankFbs::VT_NAME, name);
  }
  void add_bank_code(int32_t bank_code) {
    fbb_.AddElement<int32_t>(BankFbs::VT_BANK_CODE, bank_code, 0);
  }
  explicit BankFbsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BankFbs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BankFbs>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BankFbs> CreateBankFbs(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int32_t bank_code = 0) {
  BankFbsBuilder builder_(_fbb);
  builder_.add_bank_code(bank_code);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<BankFbs> CreateBankFbsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t bank_code = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return flatbuffers::CreateBankFbs(
      _fbb,
      name__,
      bank_code);
}

struct BankAccountFbs FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BankAccountFbsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT_NUMBER = 4,
    VT_CHECK_DIGIT = 6
  };
  int32_t account_number() const {
    return GetField<int32_t>(VT_ACCOUNT_NUMBER, 0);
  }
  uint8_t check_digit() const {
    return GetField<uint8_t>(VT_CHECK_DIGIT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ACCOUNT_NUMBER, 4) &&
           VerifyField<uint8_t>(verifier, VT_CHECK_DIGIT, 1) &&
           verifier.EndTable();
  }
};

struct BankAccountFbsBuilder {
  typedef BankAccountFbs Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_account_number(int32_t account_number) {
    fbb_.AddElement<int32_t>(BankAccountFbs::VT_ACCOUNT_NUMBER, account_number, 0);
  }
  void add_check_digit(uint8_t check_digit) {
    fbb_.AddElement<uint8_t>(BankAccountFbs::VT_CHECK_DIGIT, check_digit, 0);
  }
  explicit BankAccountFbsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BankAccountFbs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BankAccountFbs>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BankAccountFbs> CreateBankAccountFbs(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t account_number = 0,
    uint8_t check_digit = 0) {
  BankAccountFbsBuilder builder_(_fbb);
  builder_.add_account_number(account_number);
  builder_.add_check_digit(check_digit);
  return builder_.Finish();
}

struct FundTransferFbs FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FundTransferFbsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TRANSFER_DATE = 4,
    VT_SOURCE_BANK = 6,
    VT_SOURCE_BANK_ACCOUNT = 8,
    VT_DESTINATION_BANK = 10,
    VT_DESTINATION_BANK_ACCOUNT = 12,
    VT_FEE_AMOUNT = 14,
    VT_AMOUNT_TRANSFER = 16,
    VT_STATUS = 18,
    VT_AUTHENTICATION_CODE = 20
  };
  const flatbuffers::DateTimeFbs *transfer_date() const {
    return GetStruct<const flatbuffers::DateTimeFbs *>(VT_TRANSFER_DATE);
  }
  const flatbuffers::BankFbs *source_bank() const {
    return GetPointer<const flatbuffers::BankFbs *>(VT_SOURCE_BANK);
  }
  const flatbuffers::BankAccountFbs *source_bank_account() const {
    return GetPointer<const flatbuffers::BankAccountFbs *>(VT_SOURCE_BANK_ACCOUNT);
  }
  const flatbuffers::BankFbs *destination_bank() const {
    return GetPointer<const flatbuffers::BankFbs *>(VT_DESTINATION_BANK);
  }
  const flatbuffers::BankAccountFbs *destination_bank_account() const {
    return GetPointer<const flatbuffers::BankAccountFbs *>(VT_DESTINATION_BANK_ACCOUNT);
  }
  float fee_amount() const {
    return GetField<float>(VT_FEE_AMOUNT, 0.0f);
  }
  double amount_transfer() const {
    return GetField<double>(VT_AMOUNT_TRANSFER, 0.0);
  }
  flatbuffers::Status status() const {
    return static_cast<flatbuffers::Status>(GetField<int8_t>(VT_STATUS, 0));
  }
  const flatbuffers::AuthenticationCodeFbs *authentication_code() const {
    return GetStruct<const flatbuffers::AuthenticationCodeFbs *>(VT_AUTHENTICATION_CODE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::DateTimeFbs>(verifier, VT_TRANSFER_DATE, 2) &&
           VerifyOffset(verifier, VT_SOURCE_BANK) &&
           verifier.VerifyTable(source_bank()) &&
           VerifyOffset(verifier, VT_SOURCE_BANK_ACCOUNT) &&
           verifier.VerifyTable(source_bank_account()) &&
           VerifyOffset(verifier, VT_DESTINATION_BANK) &&
           verifier.VerifyTable(destination_bank()) &&
           VerifyOffset(verifier, VT_DESTINATION_BANK_ACCOUNT) &&
           verifier.VerifyTable(destination_bank_account()) &&
           VerifyField<float>(verifier, VT_FEE_AMOUNT, 4) &&
           VerifyField<double>(verifier, VT_AMOUNT_TRANSFER, 8) &&
           VerifyField<int8_t>(verifier, VT_STATUS, 1) &&
           VerifyField<flatbuffers::AuthenticationCodeFbs>(verifier, VT_AUTHENTICATION_CODE, 1) &&
           verifier.EndTable();
  }
};

struct FundTransferFbsBuilder {
  typedef FundTransferFbs Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_transfer_date(const flatbuffers::DateTimeFbs *transfer_date) {
    fbb_.AddStruct(FundTransferFbs::VT_TRANSFER_DATE, transfer_date);
  }
  void add_source_bank(::flatbuffers::Offset<flatbuffers::BankFbs> source_bank) {
    fbb_.AddOffset(FundTransferFbs::VT_SOURCE_BANK, source_bank);
  }
  void add_source_bank_account(::flatbuffers::Offset<flatbuffers::BankAccountFbs> source_bank_account) {
    fbb_.AddOffset(FundTransferFbs::VT_SOURCE_BANK_ACCOUNT, source_bank_account);
  }
  void add_destination_bank(::flatbuffers::Offset<flatbuffers::BankFbs> destination_bank) {
    fbb_.AddOffset(FundTransferFbs::VT_DESTINATION_BANK, destination_bank);
  }
  void add_destination_bank_account(::flatbuffers::Offset<flatbuffers::BankAccountFbs> destination_bank_account) {
    fbb_.AddOffset(FundTransferFbs::VT_DESTINATION_BANK_ACCOUNT, destination_bank_account);
  }
  void add_fee_amount(float fee_amount) {
    fbb_.AddElement<float>(FundTransferFbs::VT_FEE_AMOUNT, fee_amount, 0.0f);
  }
  void add_amount_transfer(double amount_transfer) {
    fbb_.AddElement<double>(FundTransferFbs::VT_AMOUNT_TRANSFER, amount_transfer, 0.0);
  }
  void add_status(flatbuffers::Status status) {
    fbb_.AddElement<int8_t>(FundTransferFbs::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_authentication_code(const flatbuffers::AuthenticationCodeFbs *authentication_code) {
    fbb_.AddStruct(FundTransferFbs::VT_AUTHENTICATION_CODE, authentication_code);
  }
  explicit FundTransferFbsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FundTransferFbs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FundTransferFbs>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FundTransferFbs> CreateFundTransferFbs(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const flatbuffers::DateTimeFbs *transfer_date = nullptr,
    ::flatbuffers::Offset<flatbuffers::BankFbs> source_bank = 0,
    ::flatbuffers::Offset<flatbuffers::BankAccountFbs> source_bank_account = 0,
    ::flatbuffers::Offset<flatbuffers::BankFbs> destination_bank = 0,
    ::flatbuffers::Offset<flatbuffers::BankAccountFbs> destination_bank_account = 0,
    float fee_amount = 0.0f,
    double amount_transfer = 0.0,
    flatbuffers::Status status = flatbuffers::Status_PENDING,
    const flatbuffers::AuthenticationCodeFbs *authentication_code = nullptr) {
  FundTransferFbsBuilder builder_(_fbb);
  builder_.add_amount_transfer(amount_transfer);
  builder_.add_authentication_code(authentication_code);
  builder_.add_fee_amount(fee_amount);
  builder_.add_destination_bank_account(destination_bank_account);
  builder_.add_destination_bank(destination_bank);
  builder_.add_source_bank_account(source_bank_account);
  builder_.add_source_bank(source_bank);
  builder_.add_transfer_date(transfer_date);
  builder_.add_status(status);
  return builder_.Finish();
}

struct BankTransactionFbs FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BankTransactionFbsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TRANSACTIONS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatbuffers::FundTransferFbs>> *transactions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatbuffers::FundTransferFbs>> *>(VT_TRANSACTIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TRANSACTIONS) &&
           verifier.VerifyVector(transactions()) &&
           verifier.VerifyVectorOfTables(transactions()) &&
           verifier.EndTable();
  }
};

struct BankTransactionFbsBuilder {
  typedef BankTransactionFbs Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_transactions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatbuffers::FundTransferFbs>>> transactions) {
    fbb_.AddOffset(BankTransactionFbs::VT_TRANSACTIONS, transactions);
  }
  explicit BankTransactionFbsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BankTransactionFbs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BankTransactionFbs>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BankTransactionFbs> CreateBankTransactionFbs(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatbuffers::FundTransferFbs>>> transactions = 0) {
  BankTransactionFbsBuilder builder_(_fbb);
  builder_.add_transactions(transactions);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<BankTransactionFbs> CreateBankTransactionFbsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<flatbuffers::FundTransferFbs>> *transactions = nullptr) {
  auto transactions__ = transactions ? _fbb.CreateVector<::flatbuffers::Offset<flatbuffers::FundTransferFbs>>(*transactions) : 0;
  return flatbuffers::CreateBankTransactionFbs(
      _fbb,
      transactions__);
}

inline const flatbuffers::BankTransactionFbs *GetBankTransactionFbs(const void *buf) {
  return ::flatbuffers::GetRoot<flatbuffers::BankTransactionFbs>(buf);
}

inline const flatbuffers::BankTransactionFbs *GetSizePrefixedBankTransactionFbs(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatbuffers::BankTransactionFbs>(buf);
}

inline const char *BankTransactionFbsIdentifier() {
  return "BANK";
}

inline bool BankTransactionFbsBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, BankTransactionFbsIdentifier());
}

inline bool SizePrefixedBankTransactionFbsBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, BankTransactionFbsIdentifier(), true);
}

inline bool VerifyBankTransactionFbsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatbuffers::BankTransactionFbs>(BankTransactionFbsIdentifier());
}

inline bool VerifySizePrefixedBankTransactionFbsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatbuffers::BankTransactionFbs>(BankTransactionFbsIdentifier());
}

inline const char *BankTransactionFbsExtension() {
  return "bin";
}

inline void FinishBankTransactionFbsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffers::BankTransactionFbs> root) {
  fbb.Finish(root, BankTransactionFbsIdentifier());
}

inline void FinishSizePrefixedBankTransactionFbsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffers::BankTransactionFbs> root) {
  fbb.FinishSizePrefixed(root, BankTransactionFbsIdentifier());
}

}  // namespace flatbuffers

#endif  // FLATBUFFERS_GENERATED_BANKTRANSACTIONS_FLATBUFFERS_H_
